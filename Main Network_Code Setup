
#### setup.py
```python
from setuptools import setup, find_packages

setup(
    name='grok-sdk-simple',
    version='0.1.0',
    packages=find_packages(),
    install_requires=[
        'openai>=1.0.0',
        'python-dotenv>=1.0.0',
    ],
    description='Simple SDK for xAI Grok API',
    author='Your Name',
    author_email='your.email@example.com',
    url='https://github.com/yourusername/xai-grok-sdk-simple',
    license='MIT',
) 

After that

grok_sdk/init.py (The Core SDK Code)

import os
from dotenv import load_dotenv
from openai import OpenAI

class GrokSDK:
    def __init__(self, api_key=None):
        load_dotenv()
        self.api_key = api_key or os.getenv('XAI_API_KEY')
        if not self.api_key:
            raise ValueError("API key not found. Set XAI_API_KEY environment variable.")
        
        self.client = OpenAI(
            api_key=self.api_key,
            base_url="https://api.x.ai/v1"  # xAI API base URL
        )
    
    def chat_completion(self, prompt, model="grok-4", max_tokens=512, temperature=0.7):
        """
        Generate a chat completion response.
        - prompt: str or list of messages (e.g., [{"role": "user", "content": "Hello"}])
        - model: str (e.g., "grok-4", "grok-3-mini")
        - Returns: str (the generated response)
        """
        if isinstance(prompt, str):
            prompt = [{"role": "user", "content": prompt}]
        
        response = self.client.chat.completions.create(
            model=model,
            messages=prompt,
            max_tokens=max_tokens,
            temperature=temperature
        )
        return response.choices[0].message.content.strip()
    
    def image_generation(self, prompt, model="grok-2-image-1212", n=1, size="1024x1024"):
        """
        Generate images from text.
        - prompt: str
        - model: str (e.g., "grok-2-image-1212")
        - n: int (number of images)
        - size: str (e.g., "1024x1024")
        - Returns: list of image URLs
        """
        response = self.client.images.generate(
            model=model,
            prompt=prompt,
            n=n,
            size=size
        )
        return [img.url for img in response.data]
    
    def tool_calling(self, prompt, tools, model="grok-4"):
        """
        Call tools/functions with AI.
        - prompt: str or list of messages
        - tools: list of dicts (e.g., [{"type": "function", "function": {"name": "get_weather", "description": "Get weather", "parameters": {...}}}])
        - model: str
        - Returns: dict with tool calls and response
        """
        if isinstance(prompt, str):
            prompt = [{"role": "user", "content": prompt}]
        
        response = self.client.chat.completions.create(
            model=model,
            messages=prompt,
            tools=tools
        )
        return {
            "message": response.choices[0].message.content,
            "tool_calls": response.choices[0].message.tool_calls
        }

examples/chat_example.py (For AI Learning)

  from grok_sdk import GrokSDK

sdk = GrokSDK()
response = sdk.chat_completion("Explain machine learning basics in simple terms.", model="grok-3-mini")
print("AI Response:", response)

examples/image_example.py (For Multimodal AI)

  from grok_sdk import GrokSDK

sdk = GrokSDK()
images = sdk.image_generation("A futuristic AI robot learning from books.")
print("Generated Image URLs:", images)


examples/tool_calling_example.py (For Building AI Agents)

from grok_sdk import GrokSDK

# Define a sample tool
tools = [
    {
        "type": "function",
        "function": {
            "name": "add_numbers",
            "description": "Add two numbers",
            "parameters": {
                "type": "object",
                "properties": {
                    "a": {"type": "number"},
                    "b": {"type": "number"}
                },
                "required": ["a", "b"]
            }
        }
    }
]

sdk = GrokSDK()
result = sdk.tool_calling("What is 5 + 7?", tools, model="grok-4")
print("Tool Calls:", result["tool_calls"])
# In a real app, execute the tool based on the call and feed back to the AI.




.gitignore

__pycache__/
*.py[cod]
*.env
dist/
build/
*.egg-info/
  
